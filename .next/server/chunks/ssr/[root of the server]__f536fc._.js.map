{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/pages/_app.tsx"],"sourcesContent":["import \"../styles/globals.css\";\r\nimport { SessionProvider } from \"next-auth/react\";\r\nimport type { AppProps } from \"next/app\";\r\nimport type { Session } from \"next-auth\";\r\n\r\ninterface CustomAppProps extends AppProps {\r\n  pageProps: {\r\n    session?: Session;\r\n  };\r\n}\r\n\r\nfunction App({ Component, pageProps }: CustomAppProps) {\r\n  return (\r\n    <SessionProvider session={pageProps.session}>\r\n      <Component {...pageProps} />\r\n    </SessionProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":[],"mappings":";;;;AACA;;;;AAUA,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAkB;IACnD,qBACE,qKAAC,mIAAA,CAAA,kBAAe;QAAC,SAAS,UAAU,OAAO;kBACzC,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B;uCAEe"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/pages/moviedata.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import moment from \"moment\";\r\n\r\n// interface Movie {\r\n//   _id: string;\r\n//   name: string;\r\n//   singer: string;\r\n//   cast: string[];\r\n//   releaseDate: string;\r\n//   budget: number;\r\n// }\r\n\r\n// export default function HomePage() {\r\n//   const [movies, setMovies] = useState<Movie[]>([]);\r\n//   const [loading, setLoading] = useState<boolean>(true);\r\n//   const [error, setError] = useState<string>(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetchMovies();\r\n//   }, []);\r\n//   const fetchMovies = async () => {\r\n//     try {\r\n//       const res = await fetch(\"/api/movies\");\r\n//       if (res.ok) {\r\n//         const data = await res.json();\r\n//         setMovies(data);\r\n//       } else {\r\n//         setError(\"Failed to load movies.\");\r\n//       }\r\n//     } catch (error) {\r\n//       setError(\"Error fetching movies.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   if (loading) {\r\n//     return <div>Loading...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>{error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"p-4\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">Movie List</h1>\r\n//       <ul className=\"space-y-3\">\r\n//         {movies.map((movie) => (\r\n//           <li key={movie._id} className=\"border p-4\">\r\n//             <h3 className=\"text-xl font-semibold\">{movie.name}</h3>\r\n//             <p>\r\n//               <strong>Cast:</strong> {movie.cast.join(\", \")}\r\n//             </p>\r\n//             <p>\r\n//               <strong>Singer:</strong> {movie.singer || \"N/A\"}\r\n//             </p>\r\n//             <p>\r\n//               <strong>Release Date:</strong>\r\n//               {moment(movie.releaseDate).format(\"MMMM DD, YYYY\")}\r\n//             </p>\r\n//             <p>\r\n//               <strong>Budget:</strong> {movie.budget}\r\n//             </p>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,+BAA+B;AAE/B,oBAAoB;AACpB,iBAAiB;AACjB,kBAAkB;AAClB,oBAAoB;AACpB,oBAAoB;AACpB,yBAAyB;AACzB,oBAAoB;AACpB,IAAI;AAEJ,uCAAuC;AACvC,uDAAuD;AACvD,2DAA2D;AAC3D,oDAAoD;AAEpD,sBAAsB;AACtB,qBAAqB;AACrB,YAAY;AACZ,sCAAsC;AACtC,YAAY;AACZ,gDAAgD;AAChD,sBAAsB;AACtB,yCAAyC;AACzC,2BAA2B;AAC3B,iBAAiB;AACjB,8CAA8C;AAC9C,UAAU;AACV,wBAAwB;AACxB,4CAA4C;AAC5C,kBAAkB;AAClB,2BAA2B;AAC3B,QAAQ;AACR,OAAO;AAEP,mBAAmB;AACnB,oCAAoC;AACpC,MAAM;AAEN,iBAAiB;AACjB,iCAAiC;AACjC,MAAM;AAEN,aAAa;AACb,4BAA4B;AAC5B,gEAAgE;AAChE,mCAAmC;AACnC,mCAAmC;AACnC,wDAAwD;AACxD,sEAAsE;AACtE,kBAAkB;AAClB,+DAA+D;AAC/D,mBAAmB;AACnB,kBAAkB;AAClB,iEAAiE;AACjE,mBAAmB;AACnB,kBAAkB;AAClB,+CAA+C;AAC/C,oEAAoE;AACpE,mBAAmB;AACnB,kBAAkB;AAClB,wDAAwD;AACxD,mBAAmB;AACnB,kBAAkB;AAClB,cAAc;AACd,cAAc;AACd,aAAa;AACb,OAAO;AACP,IAAI"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}