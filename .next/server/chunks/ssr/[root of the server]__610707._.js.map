{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/pages/_app.tsx"],"sourcesContent":["import \"../styles/globals.css\";\r\nimport { SessionProvider } from \"next-auth/react\";\r\nimport type { AppProps } from \"next/app\";\r\nimport type { Session } from \"next-auth\";\r\n\r\ninterface CustomAppProps extends AppProps {\r\n  pageProps: {\r\n    session?: Session;\r\n  };\r\n}\r\n\r\nfunction App({ Component, pageProps }: CustomAppProps) {\r\n  return (\r\n    <SessionProvider session={pageProps.session}>\r\n      <Component {...pageProps} />\r\n    </SessionProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":[],"mappings":";;;;AACA;;;;AAUA,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAkB;IACnD,qBACE,qKAAC,mIAAA,CAAA,kBAAe;QAAC,SAAS,UAAU,OAAO;kBACzC,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B;uCAEe"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/components/Input.tsx"],"sourcesContent":["// Input.tsx (or within the same file)\r\nimport React from \"react\";\r\n\r\ninterface InputProps {\r\n  label: string;\r\n  value: string | number;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  id: string;\r\n  type: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ label, value, onChange, id, type }) => {\r\n  return (\r\n    <div className=\"flex flex-col\">\r\n      <label htmlFor={id} className=\"text-white font-semibold mb-1\">\r\n        {label}\r\n      </label>\r\n      <input\r\n        id={id}\r\n        type={type}\r\n        value={value}\r\n        onChange={onChange}\r\n        className=\"px-4 py-2 bg-gray-800 text-white rounded-md\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;;;AAWtC,MAAM,QAA8B,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE;IACvE,qBACE,qKAAC;QAAI,WAAU;;0BACb,qKAAC;gBAAM,SAAS;gBAAI,WAAU;0BAC3B;;;;;;0BAEH,qKAAC;gBACC,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,WAAU;;;;;;;;;;;;AAIlB;uCAEe"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/pages/edit/%5Bid%5D.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport axios from \"axios\";\r\nimport Input from \"@/components/Input\"; // Adjust the path based on your folder structure\r\n\r\ninterface Movie {\r\n  _id: string;\r\n  name: string;\r\n  singer: string;\r\n  cast: string[];\r\n  releaseDate: string;\r\n  budget: number;\r\n}\r\n\r\nconst EditMoviePage = () => {\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const [movie, setMovie] = useState<Movie | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string>(\"\");\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [singer, setSinger] = useState<string>(\"\");\r\n  const [cast, setCast] = useState<string[]>([]);\r\n  const [releaseDate, setReleaseDate] = useState<string>(\"\");\r\n  const [budget, setBudget] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchMovie(id as string); // Fetch movie details by ID when the component mounts\r\n    }\r\n  }, [id]);\r\n\r\n  const fetchMovie = async (movieId: string) => {\r\n    try {\r\n      const res = await axios.get(`/api/movies/${movieId}`); // Fetch movie data from API\r\n      if (res.status === 200) {\r\n        setMovie(res.data); // Set the movie data to the state\r\n      } else {\r\n        setError(\"Movie not found.\");\r\n      }\r\n    } catch (error) {\r\n      setError(\"Error fetching movie data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  // const fetchMovie = async (movieId: string) => {\r\n  //   try {\r\n  //     const res = await axios.get(`/api/movies/${movieId}`);\r\n  //     if (res.status === 200) {\r\n  //       const movieData = res.data;\r\n  //       setMovie(movieData);\r\n  //       setName(movieData.name);\r\n  //       setSinger(movieData.singer || \"\");\r\n  //       setCast(movieData.cast);\r\n  //       setReleaseDate(movieData.releaseDate);\r\n  //       setBudget(movieData.budget);\r\n  //     } else {\r\n  //       setError(\"Movie not found.\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     setError(\"Error fetching movie data.\");\r\n  //   } finally {\r\n  //     setLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const updatedMovie = {\r\n        name,\r\n        singer,\r\n        cast,\r\n        releaseDate,\r\n        budget,\r\n      };\r\n\r\n      await axios.put(`/api/movies/${id}`, updatedMovie);\r\n      router.push(\"/\"); // Redirect after save\r\n    } catch (error) {\r\n      setError(\"Error updating movie.\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Edit Movie</h1>\r\n      <div className=\"space-y-4\">\r\n        <Input\r\n          label=\"Movie Name\"\r\n          value={name}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setName(e.target.value)\r\n          }\r\n          id=\"movie-name\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Input\r\n          label=\"Singer\"\r\n          value={singer}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setSinger(e.target.value)\r\n          }\r\n          id=\"movie-singer\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Input\r\n          label=\"Cast\"\r\n          value={cast.join(\", \")}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setCast(e.target.value.split(\", \").map((name) => name.trim()))\r\n          }\r\n          id=\"movie-cast\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Input\r\n          label=\"Release Date\"\r\n          value={releaseDate}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setReleaseDate(e.target.value)\r\n          }\r\n          id=\"movie-releaseDate\"\r\n          type=\"date\"\r\n        />\r\n\r\n        <Input\r\n          label=\"Budget\"\r\n          value={budget}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n            setBudget(Number(e.target.value))\r\n          }\r\n          id=\"movie-budget\"\r\n          type=\"number\"\r\n        />\r\n\r\n        <button\r\n          onClick={handleSave}\r\n          className=\"bg-red-600 py-3 text-white rounded-md w-full mt-4 focus:bg-red-700 transition\"\r\n        >\r\n          Save Changes\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditMoviePage;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA,+LAAwC,iDAAiD;;;;;;;;;;AAWzF,MAAM,gBAAgB;IACpB,MAAM,SAAS,CAAA,GAAA,uHAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,EAAE,EAAE,GAAG,OAAO,KAAK;IAC3B,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAgB;IACjD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAW;IAChD,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IAC3C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IACzC,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IAC7C,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IAC7C,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IACvD,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,mGAAA,CAAA,WAAQ,AAAD,EAAU;IAE7C,CAAA,GAAA,mGAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,IAAI;YACN,WAAW,KAAe,sDAAsD;QAClF;IACF,GAAG;QAAC;KAAG;IAEP,MAAM,aAAa,OAAO;QACxB,IAAI;YACF,MAAM,MAAM,MAAM,0GAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,SAAS,GAAG,4BAA4B;YACnF,IAAI,IAAI,MAAM,KAAK,KAAK;gBACtB,SAAS,IAAI,IAAI,GAAG,kCAAkC;YACxD,OAAO;gBACL,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,SAAS;QACX,SAAU;YACR,WAAW;QACb;IACF;IAEA,IAAI,SAAS;QACX,qBAAO,qKAAC;sBAAI;;;;;;IACd;IAEA,IAAI,OAAO;QACT,qBAAO,qKAAC;sBAAK;;;;;;IACf;IAEA,kDAAkD;IAClD,UAAU;IACV,6DAA6D;IAC7D,gCAAgC;IAChC,oCAAoC;IACpC,6BAA6B;IAC7B,iCAAiC;IACjC,2CAA2C;IAC3C,iCAAiC;IACjC,+CAA+C;IAC/C,qCAAqC;IACrC,eAAe;IACf,sCAAsC;IACtC,QAAQ;IACR,sBAAsB;IACtB,8CAA8C;IAC9C,gBAAgB;IAChB,yBAAyB;IACzB,MAAM;IACN,KAAK;IAEL,MAAM,aAAa;QACjB,IAAI;YACF,MAAM,eAAe;gBACnB;gBACA;gBACA;gBACA;gBACA;YACF;YAEA,MAAM,0GAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,IAAI,EAAE;YACrC,OAAO,IAAI,CAAC,MAAM,sBAAsB;QAC1C,EAAE,OAAO,OAAO;YACd,SAAS;QACX;IACF;IAEA,IAAI,SAAS;QACX,qBAAO,qKAAC;sBAAI;;;;;;IACd;IAEA,IAAI,OAAO;QACT,qBAAO,qKAAC;sBAAK;;;;;;IACf;IAEA,qBACE,qKAAC;QAAI,WAAU;;0BACb,qKAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,qKAAC;gBAAI,WAAU;;kCACb,qKAAC,6GAAA,CAAA,UAAK;wBACJ,OAAM;wBACN,OAAO;wBACP,UAAU,CAAC,IACT,QAAQ,EAAE,MAAM,CAAC,KAAK;wBAExB,IAAG;wBACH,MAAK;;;;;;kCAGP,qKAAC,6GAAA,CAAA,UAAK;wBACJ,OAAM;wBACN,OAAO;wBACP,UAAU,CAAC,IACT,UAAU,EAAE,MAAM,CAAC,KAAK;wBAE1B,IAAG;wBACH,MAAK;;;;;;kCAGP,qKAAC,6GAAA,CAAA,UAAK;wBACJ,OAAM;wBACN,OAAO,KAAK,IAAI,CAAC;wBACjB,UAAU,CAAC,IACT,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,OAAS,KAAK,IAAI;wBAE5D,IAAG;wBACH,MAAK;;;;;;kCAGP,qKAAC,6GAAA,CAAA,UAAK;wBACJ,OAAM;wBACN,OAAO;wBACP,UAAU,CAAC,IACT,eAAe,EAAE,MAAM,CAAC,KAAK;wBAE/B,IAAG;wBACH,MAAK;;;;;;kCAGP,qKAAC,6GAAA,CAAA,UAAK;wBACJ,OAAM;wBACN,OAAO;wBACP,UAAU,CAAC,IACT,UAAU,OAAO,EAAE,MAAM,CAAC,KAAK;wBAEjC,IAAG;wBACH,MAAK;;;;;;kCAGP,qKAAC;wBACC,SAAS;wBACT,WAAU;kCACX;;;;;;;;;;;;;;;;;;AAMT;uCAEe"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}