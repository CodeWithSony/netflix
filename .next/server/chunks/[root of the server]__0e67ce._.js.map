{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/lib/db.ts"],"sourcesContent":["import mongoose, { Connection, ConnectOptions } from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGO_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\r\n    \"Please define the MONGO_URI environment variable in .env.local\"\r\n  );\r\n}\r\n\r\n// Extend Node.js global object to store the cached connection\r\ninterface MongooseGlobal {\r\n  conn: Connection | null;\r\n  promise: Promise<Connection> | null;\r\n}\r\n\r\n// Use global cache to prevent multiple connections\r\ndeclare global {\r\n  var mongooseGlobal: MongooseGlobal | undefined;\r\n}\r\n\r\nlet cached: MongooseGlobal = global.mongooseGlobal || {\r\n  conn: null,\r\n  promise: null,\r\n};\r\n\r\nif (!global.mongooseGlobal) {\r\n  global.mongooseGlobal = cached;\r\n}\r\n\r\nasync function dbConnect(): Promise<Connection> {\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    const opts: ConnectOptions = { bufferCommands: false };\r\n\r\n    cached.promise = mongoose\r\n      .connect(MONGODB_URI, opts)\r\n      .then((mongooseInstance) => {\r\n        console.log(\"✅ MongoDB connected successfully\");\r\n        return mongooseInstance.connection; // Extract the connection instance\r\n      });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (error) {\r\n    cached.promise = null;\r\n    throw error;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default dbConnect;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,SAAS;AAEzC,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MACR;AAEJ;AAaA,IAAI,SAAyB,OAAO,cAAc,IAAI;IACpD,MAAM;IACN,SAAS;AACX;AAEA,IAAI,CAAC,OAAO,cAAc,EAAE;IAC1B,OAAO,cAAc,GAAG;AAC1B;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAuB;YAAE,gBAAgB;QAAM;QAErD,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CACtB,OAAO,CAAC,aAAa,MACrB,IAAI,CAAC,CAAC;YACL,QAAQ,GAAG,CAAC;YACZ,OAAO,iBAAiB,UAAU,EAAE,kCAAkC;QACxE;IACJ;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,OAAO;QACd,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/models/Video.ts"],"sourcesContent":["import { Schema, model, models } from \"mongoose\";\r\n\r\nconst VideoSchema = new Schema({\r\n  movieId: { type: Schema.Types.ObjectId, ref: \"Movie\", required: true },\r\n  videoUrl: { type: String, required: true },\r\n  uploadDate: { type: Date, default: Date.now },\r\n});\r\n\r\nexport const Video = models.Video || model(\"Video\", VideoSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC7B,SAAS;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAS,UAAU;IAAK;IACrE,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC9C;AAEO,MAAM,QAAQ,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,SAAS"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/models/Image.ts"],"sourcesContent":["import { Schema, model, models } from \"mongoose\";\r\n\r\nconst ImageSchema = new Schema({\r\n  movieId: { type: Schema.Types.ObjectId, ref: \"Movie\", required: true },\r\n  imageUrl: { type: String, required: true },\r\n  uploadDate: { type: Date, default: Date.now },\r\n});\r\n\r\nexport const Image = models.Image || model(\"Image\", ImageSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC7B,SAAS;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAS,UAAU;IAAK;IACrE,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC9C;AAEO,MAAM,QAAQ,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,SAAS"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/models/Movie.ts"],"sourcesContent":["import { Schema, model, models } from \"mongoose\";\r\n\r\nconst MovieSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  singer: { type: [String], required: true }, // Use 'singer' here instead of 'singerName'\r\n  cast: { type: [String], required: true },\r\n  releaseDate: { type: Date, required: true },\r\n  budget: { type: Number, required: true },\r\n});\r\n\r\nexport const Movie = models.Movie || model(\"Movie\", MovieSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC7B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,QAAQ;QAAE,MAAM;YAAC;SAAO;QAAE,UAAU;IAAK;IACzC,MAAM;QAAE,MAAM;YAAC;SAAO;QAAE,UAAU;IAAK;IACvC,aAAa;QAAE,MAAM;QAAM,UAAU;IAAK;IAC1C,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;AACzC;AAEO,MAAM,QAAQ,yGAAA,CAAA,SAAM,CAAC,KAAK,IAAI,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,SAAS"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/pages/api/upload-video.ts"],"sourcesContent":["import formidable from \"formidable\";\r\nimport * as cloudinary from \"cloudinary\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\nimport dbConnect from \"../../lib/db\";\r\nimport { Video } from \"../../models/Video\";\r\nimport { Image } from \"../../models/Image\";\r\nimport { Movie } from \"../../models/Movie\";\r\n\r\n// Configure Cloudinary\r\ncloudinary.v2.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\n// Disable Next.js default body parsing\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false, // Formidable handles the body parsing\r\n  },\r\n};\r\n\r\nconst uploadVideo = async (req: NextApiRequest, res: NextApiResponse) => {\r\n  if (req.method !== \"POST\") {\r\n    return res.status(405).json({ error: \"Method not allowed\" });\r\n  }\r\n\r\n  try {\r\n    // Connect to database\r\n    await dbConnect();\r\n\r\n    console.log(\"Cloudinary Config Loaded ✅\");\r\n\r\n    // Set up Formidable to handle file uploads\r\n    const form = formidable({ multiples: true });\r\n\r\n    // Parse the request\r\n    const [fields, files] = await new Promise((resolve, reject) => {\r\n      form.parse(req, (err, fields, files) => {\r\n        if (err) reject(err);\r\n        resolve([fields, files]);\r\n      });\r\n    });\r\n\r\n    console.log(\"Parsed fields:\", fields);\r\n    console.log(\"Parsed files:\", files);\r\n\r\n    const videoFile = files.video?.[0];\r\n    const imageFile = files.image?.[0];\r\n\r\n    // Validate that video file exists\r\n    if (!videoFile) {\r\n      return res.status(400).json({ error: \"No video file uploaded\" });\r\n    }\r\n\r\n    let videoResult;\r\n    // Upload video to Cloudinary\r\n    try {\r\n      videoResult = await cloudinary.v2.uploader.upload(videoFile.filepath, {\r\n        resource_type: \"video\",\r\n        folder: \"videos\",\r\n      });\r\n      console.log(\"Uploaded video URL:\", videoResult.secure_url);\r\n    } catch (cloudinaryError) {\r\n      console.error(\"Cloudinary video upload error:\", cloudinaryError);\r\n      return res\r\n        .status(500)\r\n        .json({ error: \"Error uploading video to Cloudinary\" });\r\n    }\r\n\r\n    let imageUrl = null;\r\n    if (imageFile) {\r\n      try {\r\n        const imageResult = await cloudinary.v2.uploader.upload(\r\n          imageFile.filepath,\r\n          {\r\n            resource_type: \"image\",\r\n            folder: \"thumbnails\",\r\n          }\r\n        );\r\n        imageUrl = imageResult.secure_url;\r\n        console.log(\"Uploaded image URL:\", imageUrl);\r\n      } catch (cloudinaryError) {\r\n        console.error(\"Cloudinary image upload error:\", cloudinaryError);\r\n        return res\r\n          .status(500)\r\n          .json({ error: \"Error uploading image to Cloudinary\" });\r\n      }\r\n    }\r\n\r\n    // Validate movieId field\r\n    const movieId = fields.movieId?.[0]; // Formidable returns arrays\r\n    if (!movieId) {\r\n      return res.status(400).json({ error: \"No movie ID provided\" });\r\n    }\r\n\r\n    // Check if movie exists in the database\r\n    const movie = await Movie.findById(movieId);\r\n    if (!movie) {\r\n      return res.status(400).json({ error: \"Movie not found\" });\r\n    }\r\n\r\n    // Save video information in the database\r\n    const video = new Video({ movieId, videoUrl: videoResult.secure_url });\r\n    await video.save();\r\n\r\n    // Save image information in the database if available\r\n    if (imageUrl) {\r\n      const image = new Image({ movieId, imageUrl });\r\n      await image.save();\r\n    }\r\n\r\n    // Send response with video URL and image URL\r\n    return res.status(200).json({\r\n      message: \"Upload successful!\",\r\n      videoUrl: videoResult.secure_url,\r\n      imageUrl: imageUrl || null,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Upload error:\", error);\r\n    return res.status(500).json({ error: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nexport default uploadVideo;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 358, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file://E%3A/practice/netflix/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;;;;;yMAGzBD,QAAAA,EAAMC,0HAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,0HAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}